@page "/reset"
@layout EmptyLayout
@inject NavigationManager nav
@using ExpenseTracker.Client.ViewModels
@inject IRegisterViewModel _registerViewModel
@inject IToastService toastService



<div class="vw-100 vh-100 d-flex justify-content-center align-items-center ">
    <EditForm Model="_registerViewModel" class="vw-25 vh-30  shadow p-5 rounded" OnSubmit="@IsValidSecurityAnswer">
        <div class="form-floating mb-3 ">
            <input type="Username" required class="form-control" @bind="_registerViewModel.Username" @bind:event="onchange"  id="floatingInput" placeholder="Username">
            <label for="floatingInput">Username</label>
        </div>
        <button  type="button" class="btn btn-primary mb-3" @onclick="IsValidUsername">Show Reset Options</button>
        @if (ValidUsername)
        {
         <div><h3>Security Question:</h3></div>
            <div class="form-floating mb-3 ">
                <p>Security Question:</p>
            </div>
            <div class="form-floating mb-3 ">
                <input type="SecurityAnswer" required class="form-control" @bind="_registerViewModel.SecurityAnswer" id="floatingInput" placeholder="SecurityAnswer">
                <label for="floatingSecurityAnswer">SecurityAnswer</label>
            </div>
            <div class="mb-3"><button type="submit" class="btn btn-primary">Submit</button></div>
        }
        else
        {
            <div><i>Enter valid Usesname</i></div>
        }

        

    </EditForm>
</div>


@code {
    public bool ValidUsername = false;

    public async void IsValidUsername()
    {
        var response = await _registerViewModel.IsValidUsername(_registerViewModel.Username);
        if (!response)
        {
            ValidUsername = false;
        }
        else
        {
            ValidUsername = true;
        }
        StateHasChanged();
    }
    public async void IsValidSecurityAnswer()
    {
        
    }
}
