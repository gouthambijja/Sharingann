@*@using ChartJs.Blazor.PieChart
@using ExpressTrackerLogicLayer.Models;
<div class="d-flex justify-content-center align-items-center " style="height:calc( 100% - 95px )">
    <Chart Config="_config"></Chart>
</div>

@code {
    [Parameter]
    public List<BLTransaction> transactions { get; set; }
    [Parameter]
    public List<BLCategory> categories { get; set; }
    private PieConfig _config;
    private Dictionary<string, int> map = new Dictionary<string, int>();
    private PieDataset<int> dataset;
    protected override void OnInitialized()
    {
        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Categories Summary"
                    }
                }
            };


    }
    protected override void OnParametersSet()
    {
        foreach (var transaction in transactions)
        {
            if (map.TryGetValue(transaction.Category, out int value))
            {
                map[transaction.Category] = value + 1;
            }
            else
            {
                map.Add(transaction.Category, 1);
            }
        }

        int[] CategoryCountArray = new int[categories.Count() + 6];
        string[] CategoryNameArray = new string[categories.Count() + 6];
        string[] CategoryColor = new string[categories.Count() + 6];
        int idx = 0;
        foreach (var mapItem in map)
        {
            Console.WriteLine(CategoryCountArray.Length + " " + idx);
            CategoryCountArray[idx] = mapItem.Value;
            CategoryColor[idx] = ColorUtil.RandomColorString();
            _config.Data.Labels.Add(mapItem.Key);//category
            idx++;
        }
         dataset = new PieDataset<int>(CategoryCountArray)
            {
                BackgroundColor = CategoryColor
            };
        _config.Data.Datasets.Add(dataset);
    }

}
*@