@using ExpenseTracker.Client.ViewModels;
@using ExpressTrackerLogicLayer.Models;
@inject IHomeViewModel _homeViewModel
@inject StateContainerService stateService
@implements IDisposable
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager nav

<div class="container TransactionContainer w-65 m-auto ">
    <div class="d-flex justify-content-end mb-3 ">
        @* <select class=" btn btn-primary me-2 " @bind="sortBy" required>
        <option  value="DateAscending" selected >Date Ascending</option>
        <option value="DateDescending">Date Descending</option>
        <option value="NameAscending">Name Ascending</option>
        <option value="NameDescending">Name Descending</option>
        <option value="CategoryAscending">Category Ascending</option>
        <option value="CategoryDescending">Category Descending</option>
        <option value="DescriptionAscending">Description Ascending</option>
        <option value="DescriptionDescending">Description Descending</option>
        </select>*@
        @if (NoOfTransactionsSelected > 0)
        {
            <button class="btn btn-danger me-2" @onclick="DeleteMultiple">
                Delete Selected (@NoOfTransactionsSelected)
            </button>
        }
        
        <button class="btn btn-primary me-2" @onclick="SortForm">
            Sort
        </button>
        <button class="btn btn-primary " @onclick="FilterForm">
            Filter
        </button>
    </div>
    @if (stateService.Transactions != null && stateService.Transactions.Count != 0)
    {

        @for (i = 0; i < transactions.Count();)
        {
            <div class="row ">
                @for (int j = 0; i < transactions.Count() && j < 3; j++, i++)
                {
                    <div class="col-md-4 ">
                        @{
                            int idx = i;
                            <div class="card mb-2 shadow transaction-card @(selected[idx]?"select":"")" >
                                <div class="card-header ps-5 bg-transparent">
                                    <h4>@transactions[i].Name</h4>
                                </div>
                                <div class="card-body pointer   " @onclick="(()=>{if(selected[idx] == true){selected[idx] = false;NoOfTransactionsSelected--;}else{selected[idx]=true;NoOfTransactionsSelected++;}})">
                                    <h5 class="card-title">₹@transactions[i].Amount /-</h5>
                                    <p class="card-text">@transactions[i].Category</p>
                                    <div class="" style="text-align:right;">@transactions[i].Date</div>

                                </div>
                                <div class="card-footer text-muted bg-transparent">


                                    <div class="d-flex justify-content-end mx-2 my-2">
                                        @if (selected[idx])
                                        {
                                            <span class="hover-color-primary me-2 " style="min-width:max-content !important" @onclick="(()=>{selected[idx]=false;NoOfTransactionsSelected = NoOfTransactionsSelected - 1;})"><i class="fa-regular fa-square-check"></i></span>
                                        }
                                        else
                                        {
                                            <span class="hover-color-primary me-2 " style="min-width:max-content !important" @onclick="(()=>{selected[idx]=true; NoOfTransactionsSelected = NoOfTransactionsSelected + 1;})"><i class="fa-regular fa-square"></i></span>
                                            
                                        }
                                        <span class="hover-color-primary me-2 " style="min-width:max-content !important" @onclick="@(()=> ShowTransaction(idx))"><i class="fa-solid fa-maximize"></i></span>
                                        <span class="hover-color-primary me-2 " style="min-width:max-content !important" @onclick="@(()=> EditCurrentTransaction(idx))"><i class="fas fa-edit"></i></span>
                                        <span class="hover-color-primary " style="min-width:max-content !important" @onclick="@(()=>DeleteCurrentTransaction(idx))"><i class="fa fa-trash" aria-hidden="true"></i></span>
                                    </div>

                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
    else
    {

        <p class="m-5" style="text-align:center;color:grey;">No Transactions.</p>
    }
</div>

@code {
    private bool[] selected;
    private int NoOfTransactionsSelected = 0;
    public string sortBy { get; set; }
    public DateTime date = DateTime.UtcNow;
    public int i = 0;
    [Parameter]
    public List<BLTransaction> transactions { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter]
    public List<BLCategory> Categories { get; set; }


    protected override async Task OnInitializedAsync()
    {
        stateService.OnStateChange += StateHasChanged;
    }
    public async void SearchTransactions()
    {
        List<BLTransaction> FilteredTransactions = new List<BLTransaction>();
        //if(_homeViewModel.TransactionSearchType == "date")
        //{
        //    FilteredTransactions = await _homeViewModel.GetFilteredTransactionsByDate(stateService.User.UserId, _homeViewModel.StartDate, _homeViewModel.EndDate);
        //}
        //else if (_homeViewModel.TransactionSearchType == "none")
        //{
        //    FilteredTransactions = await _homeViewModel.GetTransactions(stateService.User.UserId);
        //}
        //else
        //{
        //    FilteredTransactions = await _homeViewModel.GetFilteredTransactions(stateService.User.UserId, _homeViewModel.TransactionSearchType, _homeViewModel.TransactionSearchString);
        //}
        stateService.SetTransaction(FilteredTransactions);
    }
    public void FilterForm()
    {
        var parameters = new ModalParameters()
      .Add(nameof(FilterTransactions.Categories), Categories);
        var _FilterTransactions = Modal.Show
    <FilterTransactions>("Filters", parameters);
    }
    public void SortForm()
    {
        Modal.Show
    <SortByTransaction>();
    }
    //public string GetCategoryType()
    //{
    //    return _homeViewModel.TransactionSearchType;
    //}
    public void ShowTransaction(int idx)
    {
        var transaction = transactions[idx];
        var parameters = new ModalParameters()
       .Add(nameof(TransactionInfoModal.transaction), transaction);
        Modal.Show<TransactionInfoModal>("", parameters);
    }
    public void EditCurrentTransaction(int idx)
    {
        var transaction = transactions[idx];
        var parameters = new ModalParameters()
       .Add(nameof(EditTransaction.transaction), transaction)
       .Add(nameof(EditTransaction.Categories), Categories);
        var EditTransactionModal = Modal.Show
    <EditTransaction>("Edit Transaction", parameters);
    }
    public void DeleteCurrentTransaction(int idx)
    {
        NoOfTransactionsSelected = 0;
        selected = new bool[transactions.Count()];
        StateHasChanged();
        var transaction = transactions[idx];
        var parameters = new ModalParameters()
        .Add(nameof(DeleteTransactionModal.transaction), transaction);
        Modal.Show<DeleteTransactionModal>("", parameters);
    }
    public async void DeleteMultiple()
    {
        List<string> TransactionIds = new List<string>();
        List<BLTransaction> transactionsToBeDeleted = new List<BLTransaction>();
        for (var i = 0; i < selected.Length; i++)
        {
            if (selected[i])
            {
                TransactionIds.Add(transactions[i].TransactionId);
                transactionsToBeDeleted.Add(transactions[i]);
            }

        }
        var parameters = new ModalParameters()
        .Add(nameof(DeleteMultipleTransactionsModal.transactionIds), TransactionIds)
        .Add(nameof(DeleteMultipleTransactionsModal.transactions), transactionsToBeDeleted)
        .Add(nameof(DeleteMultipleTransactionsModal.NoOfTransactionsSelected), NoOfTransactionsSelected);
        var DeleteModal = Modal.Show<DeleteMultipleTransactionsModal>("", parameters);
        var result = await DeleteModal.Result;
        if (result.Confirmed)
        {
            NoOfTransactionsSelected = 0;
            selected = new bool[transactions.Count()];
            StateHasChanged();
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        selected = new bool[transactions.Count()];
        //toastService.ShowInfo("transactions REndered");
    }
    public void Dispose()
    {
        stateService.OnStateChange -= StateHasChanged;
    }
}
