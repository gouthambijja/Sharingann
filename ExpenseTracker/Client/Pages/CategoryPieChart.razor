@using ExpressTrackerLogicLayer.Models;
@inject StateContainerService stateService
@inject CategoiresStateContainerService categoryStateService
<h2 style="text-align:center;padding:1rem;">Category Summary</h2>
<div class="d-flex justify-content-center align-items-center " style="height:calc( 100% - 95px )">

<MudChart ChartType="MudBlazor.ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px" />
</div>
@code {
    [Parameter]
    public List<BLTransaction> transactions { get; set; }
    [Parameter]
    public List<BLCategory> categories { get; set; }
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    double[] data;
    string[] labels;
    

    protected override void OnInitialized()
    {
        Dictionary<string, int> map = new Dictionary<string, int>();
        stateService.OnStateChange += StateHasChanged;
        categoryStateService.OnStateChange += StateHasChanged;

        foreach(var transaction in transactions)
        {
            if(map.TryGetValue(transaction.Category,out int value))
            {
                map[transaction.Category] =  value + 1;
            }
            else
            {
                map.Add(transaction.Category, 1);   
            }
        }
        double[] CategoryCountArray = new double[categories.Count()+6];
        string[] CategoryNameArray = new string[categories.Count()+6];
        int idx = 0;
        foreach(var mapItem in map)
        {
            Console.WriteLine(CategoryCountArray.Length + " " + idx);
            CategoryCountArray[idx] = mapItem.Value;
            CategoryNameArray[idx] = $"{mapItem.Key} ({mapItem.Value})";
            idx++;
        }
        data = CategoryCountArray;
        labels = CategoryNameArray;
    }

    public void Dispose()
    {
        stateService.OnStateChange -= StateHasChanged;
        categoryStateService.OnStateChange -= StateHasChanged;
    }
}