@page "/login"
@using ExpenseTracker.Client.ViewModels;
@using ExpressTrackerLogicLayer.Models;
@layout EmptyLayout
@inject NavigationManager nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoginViewModel _loginViewModel
@inject StateContainerService stateService
@implements IDisposable
@inject IToastService toastService


<div class="vw-100 vh-100 d-flex justify-content-center align-items-center ">
    <EditForm Model="@_loginViewModel" class="vw-25 vh-30  shadow p-5 rounded " OnSubmit="@LoginUser">
        <div class="form-floating mb-3 ">
            <input type="Username" required @bind="_loginViewModel.Username" class="form-control" id="floatingInput" placeholder="Username">
            <label for="floatingInput">Username</label>
        </div>
        <div class="form-floating mb-3">
            <input type="password" required @bind="_loginViewModel.Password" class="form-control" id="floatingPassword" placeholder="Password">
            <label for="floatingPassword">Password</label>
        </div>
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary ">Login</button>
            @if (logging == true)
            {
                <span class="spinner-border text-primary center" role="status">
                </span>
            }
        </div>


        <div class="text-center m-3">
            <p>Forget password? <a href="#!" class="pointer text-primary">Reset</a></p>
            <p>Not a member? <a @onclick="register" class="pointer text-primary">Register</a></p>
            <p>or sign up with:</p>
            <button type="button" class="btn btn-link btn-floating mx-1">
                <i class="fab fa-facebook-f"></i>
            </button>

            <button type="button" class="btn btn-link btn-floating mx-1" @onclick="LoginThroughGoogle">
                <i class="fab fa-google"></i>
            </button>

            <button type="button" class="btn btn-link btn-floating mx-1">
                <i class="fab fa-twitter"></i>
            </button>

            <button type="button" class="btn btn-link btn-floating mx-1">
                <i class="fab fa-github"></i>
            </button>
        </div>

    </EditForm>
    @Token
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; }

    public bool logging = false;
    public BLUser user;
    protected async override Task OnInitializedAsync()
    {
        stateService.OnStateChange += StateHasChanged;
        if (Token != null && Token.Length > 0)
        {
            await localStorage.SetItemAsync("jwt_token", Token);
            nav.NavigateTo($"home", true);
        }
        else
        {
            string token = await localStorage.GetItemAsync<string>("jwt_token");
            if (token != null && token.Length > 0)
            {
                try
                {
                    user = await _loginViewModel.GetUserByJWT(token);
                }
                catch
                {
                    Console.WriteLine("Network Error");
                }
                if (user != null)
                {
                    Console.WriteLine("session-token!");
                    stateService.SetUser(user);
                    nav.NavigateTo("home");

                }
            }
        }
    }
    protected async override Task OnParametersSetAsync()
    {
       


    }


    public async void LoginUser()
    {
        logging = true;
        StateHasChanged();
        try
        {
            var response = await _loginViewModel.Login();
            string token = await _loginViewModel.GetAuthenticateJwt(response);
            await localStorage.SetItemAsync("jwt_token", token);

            //stateService.SetUser(response);
            Console.WriteLine("hey!!");
            nav.NavigateTo($"home", true);
        }
        catch
        {
            toastService.ShowError("Wrong Credentials.");
        }
        logging = false;
        StateHasChanged();

    }

    public void register()
    {
        nav.NavigateTo("registration");
    }
    public void LoginThroughGoogle()
    {
        nav.NavigateTo("/user/GoogleSignIn", true);
    }
    public void Dispose()
    {
        stateService.OnStateChange -= StateHasChanged;
    }

}
